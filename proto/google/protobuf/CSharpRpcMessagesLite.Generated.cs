// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace Google.ProtocolBuffers.Rpc.Messages {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class CSharpRpcMessagesLite {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static CSharpRpcMessagesLite() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcRequestHeader : pb::ExtendableMessageLite<RpcRequestHeader, RpcRequestHeader.Builder> {
    private RpcRequestHeader() { }
    private static readonly RpcRequestHeader defaultInstance = new RpcRequestHeader().MakeReadOnly();
    private static readonly string[] _rpcRequestHeaderFieldNames = new string[] { "call_context", "content_length", "message_id", "method_name", "version" };
    private static readonly uint[] _rpcRequestHeaderFieldTags = new uint[] { 42, 32, 26, 18, 8 };
    public static RpcRequestHeader DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcRequestHeader DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcRequestHeader ThisMessage {
      get { return this; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private int version_ = 1;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int MethodNameFieldNumber = 2;
    private bool hasMethodName;
    private string methodName_ = "";
    public bool HasMethodName {
      get { return hasMethodName; }
    }
    public string MethodName {
      get { return methodName_; }
    }
    
    public const int MessageIdFieldNumber = 3;
    private bool hasMessageId;
    private pb::ByteString messageId_ = pb::ByteString.Empty;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public pb::ByteString MessageId {
      get { return messageId_; }
    }
    
    public const int ContentLengthFieldNumber = 4;
    private bool hasContentLength;
    private int contentLength_;
    public bool HasContentLength {
      get { return hasContentLength; }
    }
    public int ContentLength {
      get { return contentLength_; }
    }
    
    public const int CallContextFieldNumber = 5;
    private bool hasCallContext;
    private global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext callContext_;
    public bool HasCallContext {
      get { return hasCallContext; }
    }
    public global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext CallContext {
      get { return callContext_ ?? global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rpcRequestHeaderFieldNames;
      pb::ExtendableMessageLite<RpcRequestHeader, RpcRequestHeader.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (hasVersion) {
        output.WriteInt32(1, field_names[4], Version);
      }
      if (hasMethodName) {
        output.WriteString(2, field_names[3], MethodName);
      }
      if (hasMessageId) {
        output.WriteBytes(3, field_names[2], MessageId);
      }
      if (hasContentLength) {
        output.WriteInt32(4, field_names[1], ContentLength);
      }
      if (hasCallContext) {
        output.WriteMessage(5, field_names[0], CallContext);
      }
      extensionWriter.WriteUntil(536870912, output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
        }
        if (hasMethodName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, MethodName);
        }
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, MessageId);
        }
        if (hasContentLength) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ContentLength);
        }
        if (hasCallContext) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, CallContext);
        }
        size += ExtensionsSerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasVersion) hash ^= version_.GetHashCode();
      if (hasMethodName) hash ^= methodName_.GetHashCode();
      if (hasMessageId) hash ^= messageId_.GetHashCode();
      if (hasContentLength) hash ^= contentLength_.GetHashCode();
      if (hasCallContext) hash ^= callContext_.GetHashCode();
      hash ^= base.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RpcRequestHeader other = obj as RpcRequestHeader;
      if (other == null) return false;
      if (hasVersion != other.hasVersion || (hasVersion && !version_.Equals(other.version_))) return false;
      if (hasMethodName != other.hasMethodName || (hasMethodName && !methodName_.Equals(other.methodName_))) return false;
      if (hasMessageId != other.hasMessageId || (hasMessageId && !messageId_.Equals(other.messageId_))) return false;
      if (hasContentLength != other.hasContentLength || (hasContentLength && !contentLength_.Equals(other.contentLength_))) return false;
      if (hasCallContext != other.hasCallContext || (hasCallContext && !callContext_.Equals(other.callContext_))) return false;
      if (!base.Equals(other)) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("version", hasVersion, version_, writer);
      PrintField("method_name", hasMethodName, methodName_, writer);
      PrintField("message_id", hasMessageId, messageId_, writer);
      PrintField("content_length", hasContentLength, contentLength_, writer);
      PrintField("call_context", hasCallContext, callContext_, writer);
      base.PrintTo(writer);
    }
    #endregion
    
    public static RpcRequestHeader ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcRequestHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcRequestHeader ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcRequestHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcRequestHeader ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcRequestHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcRequestHeader ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcRequestHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcRequestHeader ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcRequestHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcRequestHeader MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcRequestHeader prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::ExtendableBuilderLite<RpcRequestHeader, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcRequestHeader cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcRequestHeader result;
      
      private RpcRequestHeader PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcRequestHeader original = result;
          result = new RpcRequestHeader();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcRequestHeader MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RpcRequestHeader DefaultInstanceForType {
        get { return global::Google.ProtocolBuffers.Rpc.Messages.RpcRequestHeader.DefaultInstance; }
      }
      
      public override RpcRequestHeader BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RpcRequestHeader) {
          return MergeFrom((RpcRequestHeader) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcRequestHeader other) {
        if (other == global::Google.ProtocolBuffers.Rpc.Messages.RpcRequestHeader.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasMethodName) {
          MethodName = other.MethodName;
        }
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasContentLength) {
          ContentLength = other.ContentLength;
        }
        if (other.HasCallContext) {
          MergeCallContext(other.CallContext);
        }
          this.MergeExtensionFields(other);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcRequestHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcRequestHeaderFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 18: {
              result.hasMethodName = input.ReadString(ref result.methodName_);
              break;
            }
            case 26: {
              result.hasMessageId = input.ReadBytes(ref result.messageId_);
              break;
            }
            case 32: {
              result.hasContentLength = input.ReadInt32(ref result.contentLength_);
              break;
            }
            case 42: {
              global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.Builder subBuilder = global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.CreateBuilder();
              if (result.hasCallContext) {
                subBuilder.MergeFrom(CallContext);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CallContext = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 1;
        return this;
      }
      
      public bool HasMethodName {
        get { return result.hasMethodName; }
      }
      public string MethodName {
        get { return result.MethodName; }
        set { SetMethodName(value); }
      }
      public Builder SetMethodName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMethodName = true;
        result.methodName_ = value;
        return this;
      }
      public Builder ClearMethodName() {
        PrepareBuilder();
        result.hasMethodName = false;
        result.methodName_ = "";
        return this;
      }
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public pb::ByteString MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasContentLength {
        get { return result.hasContentLength; }
      }
      public int ContentLength {
        get { return result.ContentLength; }
        set { SetContentLength(value); }
      }
      public Builder SetContentLength(int value) {
        PrepareBuilder();
        result.hasContentLength = true;
        result.contentLength_ = value;
        return this;
      }
      public Builder ClearContentLength() {
        PrepareBuilder();
        result.hasContentLength = false;
        result.contentLength_ = 0;
        return this;
      }
      
      public bool HasCallContext {
       get { return result.hasCallContext; }
      }
      public global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext CallContext {
        get { return result.CallContext; }
        set { SetCallContext(value); }
      }
      public Builder SetCallContext(global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCallContext = true;
        result.callContext_ = value;
        return this;
      }
      public Builder SetCallContext(global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCallContext = true;
        result.callContext_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCallContext(global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCallContext &&
            result.callContext_ != global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.DefaultInstance) {
            result.callContext_ = global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.CreateBuilder(result.callContext_).MergeFrom(value).BuildPartial();
        } else {
          result.callContext_ = value;
        }
        result.hasCallContext = true;
        return this;
      }
      public Builder ClearCallContext() {
        PrepareBuilder();
        result.hasCallContext = false;
        result.callContext_ = null;
        return this;
      }
    }
    static RpcRequestHeader() {
      object.ReferenceEquals(global::Google.ProtocolBuffers.Rpc.Messages.CSharpRpcMessagesLite.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcResponseHeader : pb::ExtendableMessageLite<RpcResponseHeader, RpcResponseHeader.Builder> {
    private RpcResponseHeader() { }
    private static readonly RpcResponseHeader defaultInstance = new RpcResponseHeader().MakeReadOnly();
    private static readonly string[] _rpcResponseHeaderFieldNames = new string[] { "call_context", "content_length", "exception", "message_id", "success", "version" };
    private static readonly uint[] _rpcResponseHeaderFieldTags = new uint[] { 42, 32, 66, 50, 56, 8 };
    public static RpcResponseHeader DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcResponseHeader DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcResponseHeader ThisMessage {
      get { return this; }
    }
    
    public const int VersionFieldNumber = 1;
    private bool hasVersion;
    private int version_ = 1;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int ContentLengthFieldNumber = 4;
    private bool hasContentLength;
    private int contentLength_;
    public bool HasContentLength {
      get { return hasContentLength; }
    }
    public int ContentLength {
      get { return contentLength_; }
    }
    
    public const int CallContextFieldNumber = 5;
    private bool hasCallContext;
    private global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext callContext_;
    public bool HasCallContext {
      get { return hasCallContext; }
    }
    public global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext CallContext {
      get { return callContext_ ?? global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.DefaultInstance; }
    }
    
    public const int MessageIdFieldNumber = 6;
    private bool hasMessageId;
    private pb::ByteString messageId_ = pb::ByteString.Empty;
    public bool HasMessageId {
      get { return hasMessageId; }
    }
    public pb::ByteString MessageId {
      get { return messageId_; }
    }
    
    public const int SuccessFieldNumber = 7;
    private bool hasSuccess;
    private bool success_ = true;
    public bool HasSuccess {
      get { return hasSuccess; }
    }
    public bool Success {
      get { return success_; }
    }
    
    public const int ExceptionFieldNumber = 8;
    private bool hasException;
    private global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo exception_;
    public bool HasException {
      get { return hasException; }
    }
    public global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo Exception {
      get { return exception_ ?? global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rpcResponseHeaderFieldNames;
      pb::ExtendableMessageLite<RpcResponseHeader, RpcResponseHeader.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (hasVersion) {
        output.WriteInt32(1, field_names[5], Version);
      }
      if (hasContentLength) {
        output.WriteInt32(4, field_names[1], ContentLength);
      }
      if (hasCallContext) {
        output.WriteMessage(5, field_names[0], CallContext);
      }
      if (hasMessageId) {
        output.WriteBytes(6, field_names[3], MessageId);
      }
      if (hasSuccess) {
        output.WriteBool(7, field_names[4], Success);
      }
      if (hasException) {
        output.WriteMessage(8, field_names[2], Exception);
      }
      extensionWriter.WriteUntil(536870912, output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
        }
        if (hasContentLength) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ContentLength);
        }
        if (hasCallContext) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, CallContext);
        }
        if (hasMessageId) {
          size += pb::CodedOutputStream.ComputeBytesSize(6, MessageId);
        }
        if (hasSuccess) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, Success);
        }
        if (hasException) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Exception);
        }
        size += ExtensionsSerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasVersion) hash ^= version_.GetHashCode();
      if (hasContentLength) hash ^= contentLength_.GetHashCode();
      if (hasCallContext) hash ^= callContext_.GetHashCode();
      if (hasMessageId) hash ^= messageId_.GetHashCode();
      if (hasSuccess) hash ^= success_.GetHashCode();
      if (hasException) hash ^= exception_.GetHashCode();
      hash ^= base.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RpcResponseHeader other = obj as RpcResponseHeader;
      if (other == null) return false;
      if (hasVersion != other.hasVersion || (hasVersion && !version_.Equals(other.version_))) return false;
      if (hasContentLength != other.hasContentLength || (hasContentLength && !contentLength_.Equals(other.contentLength_))) return false;
      if (hasCallContext != other.hasCallContext || (hasCallContext && !callContext_.Equals(other.callContext_))) return false;
      if (hasMessageId != other.hasMessageId || (hasMessageId && !messageId_.Equals(other.messageId_))) return false;
      if (hasSuccess != other.hasSuccess || (hasSuccess && !success_.Equals(other.success_))) return false;
      if (hasException != other.hasException || (hasException && !exception_.Equals(other.exception_))) return false;
      if (!base.Equals(other)) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("version", hasVersion, version_, writer);
      PrintField("content_length", hasContentLength, contentLength_, writer);
      PrintField("call_context", hasCallContext, callContext_, writer);
      PrintField("message_id", hasMessageId, messageId_, writer);
      PrintField("success", hasSuccess, success_, writer);
      PrintField("exception", hasException, exception_, writer);
      base.PrintTo(writer);
    }
    #endregion
    
    public static RpcResponseHeader ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcResponseHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcResponseHeader ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcResponseHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcResponseHeader ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcResponseHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcResponseHeader ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcResponseHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcResponseHeader ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcResponseHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcResponseHeader MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcResponseHeader prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::ExtendableBuilderLite<RpcResponseHeader, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcResponseHeader cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcResponseHeader result;
      
      private RpcResponseHeader PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcResponseHeader original = result;
          result = new RpcResponseHeader();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcResponseHeader MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RpcResponseHeader DefaultInstanceForType {
        get { return global::Google.ProtocolBuffers.Rpc.Messages.RpcResponseHeader.DefaultInstance; }
      }
      
      public override RpcResponseHeader BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RpcResponseHeader) {
          return MergeFrom((RpcResponseHeader) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcResponseHeader other) {
        if (other == global::Google.ProtocolBuffers.Rpc.Messages.RpcResponseHeader.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasContentLength) {
          ContentLength = other.ContentLength;
        }
        if (other.HasCallContext) {
          MergeCallContext(other.CallContext);
        }
        if (other.HasMessageId) {
          MessageId = other.MessageId;
        }
        if (other.HasSuccess) {
          Success = other.Success;
        }
        if (other.HasException) {
          MergeException(other.Exception);
        }
          this.MergeExtensionFields(other);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcResponseHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcResponseHeaderFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 32: {
              result.hasContentLength = input.ReadInt32(ref result.contentLength_);
              break;
            }
            case 42: {
              global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.Builder subBuilder = global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.CreateBuilder();
              if (result.hasCallContext) {
                subBuilder.MergeFrom(CallContext);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CallContext = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              result.hasMessageId = input.ReadBytes(ref result.messageId_);
              break;
            }
            case 56: {
              result.hasSuccess = input.ReadBool(ref result.success_);
              break;
            }
            case 66: {
              global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Builder subBuilder = global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.CreateBuilder();
              if (result.hasException) {
                subBuilder.MergeFrom(Exception);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Exception = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 1;
        return this;
      }
      
      public bool HasContentLength {
        get { return result.hasContentLength; }
      }
      public int ContentLength {
        get { return result.ContentLength; }
        set { SetContentLength(value); }
      }
      public Builder SetContentLength(int value) {
        PrepareBuilder();
        result.hasContentLength = true;
        result.contentLength_ = value;
        return this;
      }
      public Builder ClearContentLength() {
        PrepareBuilder();
        result.hasContentLength = false;
        result.contentLength_ = 0;
        return this;
      }
      
      public bool HasCallContext {
       get { return result.hasCallContext; }
      }
      public global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext CallContext {
        get { return result.CallContext; }
        set { SetCallContext(value); }
      }
      public Builder SetCallContext(global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCallContext = true;
        result.callContext_ = value;
        return this;
      }
      public Builder SetCallContext(global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCallContext = true;
        result.callContext_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCallContext(global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCallContext &&
            result.callContext_ != global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.DefaultInstance) {
            result.callContext_ = global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.CreateBuilder(result.callContext_).MergeFrom(value).BuildPartial();
        } else {
          result.callContext_ = value;
        }
        result.hasCallContext = true;
        return this;
      }
      public Builder ClearCallContext() {
        PrepareBuilder();
        result.hasCallContext = false;
        result.callContext_ = null;
        return this;
      }
      
      public bool HasMessageId {
        get { return result.hasMessageId; }
      }
      public pb::ByteString MessageId {
        get { return result.MessageId; }
        set { SetMessageId(value); }
      }
      public Builder SetMessageId(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessageId = true;
        result.messageId_ = value;
        return this;
      }
      public Builder ClearMessageId() {
        PrepareBuilder();
        result.hasMessageId = false;
        result.messageId_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasSuccess {
        get { return result.hasSuccess; }
      }
      public bool Success {
        get { return result.Success; }
        set { SetSuccess(value); }
      }
      public Builder SetSuccess(bool value) {
        PrepareBuilder();
        result.hasSuccess = true;
        result.success_ = value;
        return this;
      }
      public Builder ClearSuccess() {
        PrepareBuilder();
        result.hasSuccess = false;
        result.success_ = true;
        return this;
      }
      
      public bool HasException {
       get { return result.hasException; }
      }
      public global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo Exception {
        get { return result.Exception; }
        set { SetException(value); }
      }
      public Builder SetException(global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasException = true;
        result.exception_ = value;
        return this;
      }
      public Builder SetException(global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasException = true;
        result.exception_ = builderForValue.Build();
        return this;
      }
      public Builder MergeException(global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasException &&
            result.exception_ != global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.DefaultInstance) {
            result.exception_ = global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.CreateBuilder(result.exception_).MergeFrom(value).BuildPartial();
        } else {
          result.exception_ = value;
        }
        result.hasException = true;
        return this;
      }
      public Builder ClearException() {
        PrepareBuilder();
        result.hasException = false;
        result.exception_ = null;
        return this;
      }
    }
    static RpcResponseHeader() {
      object.ReferenceEquals(global::Google.ProtocolBuffers.Rpc.Messages.CSharpRpcMessagesLite.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcCallContext : pb::ExtendableMessageLite<RpcCallContext, RpcCallContext.Builder> {
    private RpcCallContext() { }
    private static readonly RpcCallContext defaultInstance = new RpcCallContext().MakeReadOnly();
    private static readonly string[] _rpcCallContextFieldNames = new string[] { "session_id" };
    private static readonly uint[] _rpcCallContextFieldTags = new uint[] { 10 };
    public static RpcCallContext DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcCallContext DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcCallContext ThisMessage {
      get { return this; }
    }
    
    public const int SessionIdFieldNumber = 1;
    private bool hasSessionId;
    private pb::ByteString sessionId_ = pb::ByteString.Empty;
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public pb::ByteString SessionId {
      get { return sessionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rpcCallContextFieldNames;
      pb::ExtendableMessageLite<RpcCallContext, RpcCallContext.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (hasSessionId) {
        output.WriteBytes(1, field_names[0], SessionId);
      }
      extensionWriter.WriteUntil(536870912, output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSessionId) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, SessionId);
        }
        size += ExtensionsSerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSessionId) hash ^= sessionId_.GetHashCode();
      hash ^= base.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RpcCallContext other = obj as RpcCallContext;
      if (other == null) return false;
      if (hasSessionId != other.hasSessionId || (hasSessionId && !sessionId_.Equals(other.sessionId_))) return false;
      if (!base.Equals(other)) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("session_id", hasSessionId, sessionId_, writer);
      base.PrintTo(writer);
    }
    #endregion
    
    public static RpcCallContext ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcCallContext ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcCallContext ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcCallContext ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcCallContext ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcCallContext ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcCallContext ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcCallContext ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcCallContext ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcCallContext ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcCallContext MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcCallContext prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::ExtendableBuilderLite<RpcCallContext, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcCallContext cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcCallContext result;
      
      private RpcCallContext PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcCallContext original = result;
          result = new RpcCallContext();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcCallContext MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RpcCallContext DefaultInstanceForType {
        get { return global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.DefaultInstance; }
      }
      
      public override RpcCallContext BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RpcCallContext) {
          return MergeFrom((RpcCallContext) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcCallContext other) {
        if (other == global::Google.ProtocolBuffers.Rpc.Messages.RpcCallContext.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
          this.MergeExtensionFields(other);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcCallContextFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcCallContextFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasSessionId = input.ReadBytes(ref result.sessionId_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSessionId {
        get { return result.hasSessionId; }
      }
      public pb::ByteString SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        PrepareBuilder();
        result.hasSessionId = false;
        result.sessionId_ = pb::ByteString.Empty;
        return this;
      }
    }
    static RpcCallContext() {
      object.ReferenceEquals(global::Google.ProtocolBuffers.Rpc.Messages.CSharpRpcMessagesLite.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcExceptionInfo : pb::ExtendableMessageLite<RpcExceptionInfo, RpcExceptionInfo.Builder> {
    private RpcExceptionInfo() { }
    private static readonly RpcExceptionInfo defaultInstance = new RpcExceptionInfo().MakeReadOnly();
    private static readonly string[] _rpcExceptionInfoFieldNames = new string[] { "assembly_name", "class_name", "exception_data", "exception_method", "full_type_name", "h_result", "has_full_details", "help_url", "inner_exception", "message", "remote_stack_index", "remote_stack_trace_string", "source", "stack_trace_string" };
    private static readonly uint[] _rpcExceptionInfoFieldTags = new uint[] { 10, 34, 114, 90, 18, 96, 24, 58, 50, 42, 80, 74, 106, 66 };
    public static RpcExceptionInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcExceptionInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcExceptionInfo ThisMessage {
      get { return this; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class RpcExceptionData : pb::GeneratedMessageLite<RpcExceptionData, RpcExceptionData.Builder> {
        private RpcExceptionData() { }
        private static readonly RpcExceptionData defaultInstance = new RpcExceptionData().MakeReadOnly();
        private static readonly string[] _rpcExceptionDataFieldNames = new string[] { "member", "type", "value" };
        private static readonly uint[] _rpcExceptionDataFieldTags = new uint[] { 10, 18, 26 };
        public static RpcExceptionData DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override RpcExceptionData DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override RpcExceptionData ThisMessage {
          get { return this; }
        }
        
        public const int MemberFieldNumber = 1;
        private bool hasMember;
        private string member_ = "";
        public bool HasMember {
          get { return hasMember; }
        }
        public string Member {
          get { return member_; }
        }
        
        public const int TypeFieldNumber = 2;
        private bool hasType;
        private string type_ = "";
        public bool HasType {
          get { return hasType; }
        }
        public string Type {
          get { return type_; }
        }
        
        public const int ValueFieldNumber = 3;
        private bool hasValue;
        private string value_ = "";
        public bool HasValue {
          get { return hasValue; }
        }
        public string Value {
          get { return value_; }
        }
        
        public override bool IsInitialized {
          get {
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _rpcExceptionDataFieldNames;
          if (hasMember) {
            output.WriteString(1, field_names[0], Member);
          }
          if (hasType) {
            output.WriteString(2, field_names[1], Type);
          }
          if (hasValue) {
            output.WriteString(3, field_names[2], Value);
          }
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasMember) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Member);
            }
            if (hasType) {
              size += pb::CodedOutputStream.ComputeStringSize(2, Type);
            }
            if (hasValue) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Value);
            }
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        #region Lite runtime methods
        public override int GetHashCode() {
          int hash = GetType().GetHashCode();
          if (hasMember) hash ^= member_.GetHashCode();
          if (hasType) hash ^= type_.GetHashCode();
          if (hasValue) hash ^= value_.GetHashCode();
          return hash;
        }
        
        public override bool Equals(object obj) {
          RpcExceptionData other = obj as RpcExceptionData;
          if (other == null) return false;
          if (hasMember != other.hasMember || (hasMember && !member_.Equals(other.member_))) return false;
          if (hasType != other.hasType || (hasType && !type_.Equals(other.type_))) return false;
          if (hasValue != other.hasValue || (hasValue && !value_.Equals(other.value_))) return false;
          return true;
        }
        
        public override void PrintTo(global::System.IO.TextWriter writer) {
          PrintField("member", hasMember, member_, writer);
          PrintField("type", hasType, type_, writer);
          PrintField("value", hasValue, value_, writer);
        }
        #endregion
        
        public static RpcExceptionData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RpcExceptionData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RpcExceptionData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RpcExceptionData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RpcExceptionData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RpcExceptionData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RpcExceptionData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RpcExceptionData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RpcExceptionData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RpcExceptionData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RpcExceptionData MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RpcExceptionData prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilderLite<RpcExceptionData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(RpcExceptionData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private RpcExceptionData result;
          
          private RpcExceptionData PrepareBuilder() {
            if (resultIsReadOnly) {
              RpcExceptionData original = result;
              result = new RpcExceptionData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override RpcExceptionData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override RpcExceptionData DefaultInstanceForType {
            get { return global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData.DefaultInstance; }
          }
          
          public override RpcExceptionData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessageLite other) {
            if (other is RpcExceptionData) {
              return MergeFrom((RpcExceptionData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(RpcExceptionData other) {
            if (other == global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasMember) {
              Member = other.Member;
            }
            if (other.HasType) {
              Type = other.Type;
            }
            if (other.HasValue) {
              Value = other.Value;
            }
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_rpcExceptionDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _rpcExceptionDataFieldTags[field_ordinal];
                else {
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    return this;
                  }
                  ParseUnknownField(input, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasMember = input.ReadString(ref result.member_);
                  break;
                }
                case 18: {
                  result.hasType = input.ReadString(ref result.type_);
                  break;
                }
                case 26: {
                  result.hasValue = input.ReadString(ref result.value_);
                  break;
                }
              }
            }
            
            return this;
          }
          
          
          public bool HasMember {
            get { return result.hasMember; }
          }
          public string Member {
            get { return result.Member; }
            set { SetMember(value); }
          }
          public Builder SetMember(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasMember = true;
            result.member_ = value;
            return this;
          }
          public Builder ClearMember() {
            PrepareBuilder();
            result.hasMember = false;
            result.member_ = "";
            return this;
          }
          
          public bool HasType {
            get { return result.hasType; }
          }
          public string Type {
            get { return result.Type; }
            set { SetType(value); }
          }
          public Builder SetType(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasType = true;
            result.type_ = value;
            return this;
          }
          public Builder ClearType() {
            PrepareBuilder();
            result.hasType = false;
            result.type_ = "";
            return this;
          }
          
          public bool HasValue {
            get { return result.hasValue; }
          }
          public string Value {
            get { return result.Value; }
            set { SetValue(value); }
          }
          public Builder SetValue(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasValue = true;
            result.value_ = value;
            return this;
          }
          public Builder ClearValue() {
            PrepareBuilder();
            result.hasValue = false;
            result.value_ = "";
            return this;
          }
        }
        static RpcExceptionData() {
          object.ReferenceEquals(global::Google.ProtocolBuffers.Rpc.Messages.CSharpRpcMessagesLite.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int AssemblyNameFieldNumber = 1;
    private bool hasAssemblyName;
    private string assemblyName_ = "mscorlib";
    public bool HasAssemblyName {
      get { return hasAssemblyName; }
    }
    public string AssemblyName {
      get { return assemblyName_; }
    }
    
    public const int FullTypeNameFieldNumber = 2;
    private bool hasFullTypeName;
    private string fullTypeName_ = "System.ApplicationException";
    public bool HasFullTypeName {
      get { return hasFullTypeName; }
    }
    public string FullTypeName {
      get { return fullTypeName_; }
    }
    
    public const int HasFullDetailsFieldNumber = 3;
    private bool hasHasFullDetails;
    private bool hasFullDetails_;
    public bool HasHasFullDetails {
      get { return hasHasFullDetails; }
    }
    public bool HasFullDetails {
      get { return hasFullDetails_; }
    }
    
    public const int ClassNameFieldNumber = 4;
    private bool hasClassName;
    private string className_ = "";
    public bool HasClassName {
      get { return hasClassName; }
    }
    public string ClassName {
      get { return className_; }
    }
    
    public const int MessageFieldNumber = 5;
    private bool hasMessage;
    private string message_ = "";
    public bool HasMessage {
      get { return hasMessage; }
    }
    public string Message {
      get { return message_; }
    }
    
    public const int InnerExceptionFieldNumber = 6;
    private bool hasInnerException;
    private global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo innerException_;
    public bool HasInnerException {
      get { return hasInnerException; }
    }
    public global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo InnerException {
      get { return innerException_ ?? global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.DefaultInstance; }
    }
    
    public const int HelpUrlFieldNumber = 7;
    private bool hasHelpUrl;
    private string helpUrl_ = "";
    public bool HasHelpUrl {
      get { return hasHelpUrl; }
    }
    public string HelpUrl {
      get { return helpUrl_; }
    }
    
    public const int StackTraceStringFieldNumber = 8;
    private bool hasStackTraceString;
    private string stackTraceString_ = "";
    public bool HasStackTraceString {
      get { return hasStackTraceString; }
    }
    public string StackTraceString {
      get { return stackTraceString_; }
    }
    
    public const int RemoteStackTraceStringFieldNumber = 9;
    private bool hasRemoteStackTraceString;
    private string remoteStackTraceString_ = "";
    public bool HasRemoteStackTraceString {
      get { return hasRemoteStackTraceString; }
    }
    public string RemoteStackTraceString {
      get { return remoteStackTraceString_; }
    }
    
    public const int RemoteStackIndexFieldNumber = 10;
    private bool hasRemoteStackIndex;
    private int remoteStackIndex_;
    public bool HasRemoteStackIndex {
      get { return hasRemoteStackIndex; }
    }
    public int RemoteStackIndex {
      get { return remoteStackIndex_; }
    }
    
    public const int ExceptionMethodFieldNumber = 11;
    private bool hasExceptionMethod;
    private string exceptionMethod_ = "";
    public bool HasExceptionMethod {
      get { return hasExceptionMethod; }
    }
    public string ExceptionMethod {
      get { return exceptionMethod_; }
    }
    
    public const int HResultFieldNumber = 12;
    private bool hasHResult;
    private int hResult_;
    public bool HasHResult {
      get { return hasHResult; }
    }
    public int HResult {
      get { return hResult_; }
    }
    
    public const int SourceFieldNumber = 13;
    private bool hasSource;
    private string source_ = "";
    public bool HasSource {
      get { return hasSource; }
    }
    public string Source {
      get { return source_; }
    }
    
    public const int ExceptionDataFieldNumber = 14;
    private pbc::PopsicleList<global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData> exceptionData_ = new pbc::PopsicleList<global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData>();
    public scg::IList<global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData> ExceptionDataList {
      get { return exceptionData_; }
    }
    public int ExceptionDataCount {
      get { return exceptionData_.Count; }
    }
    public global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData GetExceptionData(int index) {
      return exceptionData_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rpcExceptionInfoFieldNames;
      pb::ExtendableMessageLite<RpcExceptionInfo, RpcExceptionInfo.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      if (hasAssemblyName) {
        output.WriteString(1, field_names[0], AssemblyName);
      }
      if (hasFullTypeName) {
        output.WriteString(2, field_names[4], FullTypeName);
      }
      if (hasHasFullDetails) {
        output.WriteBool(3, field_names[6], HasFullDetails);
      }
      if (hasClassName) {
        output.WriteString(4, field_names[1], ClassName);
      }
      if (hasMessage) {
        output.WriteString(5, field_names[9], Message);
      }
      if (hasInnerException) {
        output.WriteMessage(6, field_names[8], InnerException);
      }
      if (hasHelpUrl) {
        output.WriteString(7, field_names[7], HelpUrl);
      }
      if (hasStackTraceString) {
        output.WriteString(8, field_names[13], StackTraceString);
      }
      if (hasRemoteStackTraceString) {
        output.WriteString(9, field_names[11], RemoteStackTraceString);
      }
      if (hasRemoteStackIndex) {
        output.WriteInt32(10, field_names[10], RemoteStackIndex);
      }
      if (hasExceptionMethod) {
        output.WriteString(11, field_names[3], ExceptionMethod);
      }
      if (hasHResult) {
        output.WriteInt32(12, field_names[5], HResult);
      }
      if (hasSource) {
        output.WriteString(13, field_names[12], Source);
      }
      if (exceptionData_.Count > 0) {
        output.WriteMessageArray(14, field_names[2], exceptionData_);
      }
      extensionWriter.WriteUntil(536870912, output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAssemblyName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, AssemblyName);
        }
        if (hasFullTypeName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, FullTypeName);
        }
        if (hasHasFullDetails) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, HasFullDetails);
        }
        if (hasClassName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ClassName);
        }
        if (hasMessage) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Message);
        }
        if (hasInnerException) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, InnerException);
        }
        if (hasHelpUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(7, HelpUrl);
        }
        if (hasStackTraceString) {
          size += pb::CodedOutputStream.ComputeStringSize(8, StackTraceString);
        }
        if (hasRemoteStackTraceString) {
          size += pb::CodedOutputStream.ComputeStringSize(9, RemoteStackTraceString);
        }
        if (hasRemoteStackIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, RemoteStackIndex);
        }
        if (hasExceptionMethod) {
          size += pb::CodedOutputStream.ComputeStringSize(11, ExceptionMethod);
        }
        if (hasHResult) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, HResult);
        }
        if (hasSource) {
          size += pb::CodedOutputStream.ComputeStringSize(13, Source);
        }
        foreach (global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData element in ExceptionDataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, element);
        }
        size += ExtensionsSerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasAssemblyName) hash ^= assemblyName_.GetHashCode();
      if (hasFullTypeName) hash ^= fullTypeName_.GetHashCode();
      if (hasHasFullDetails) hash ^= hasFullDetails_.GetHashCode();
      if (hasClassName) hash ^= className_.GetHashCode();
      if (hasMessage) hash ^= message_.GetHashCode();
      if (hasInnerException) hash ^= innerException_.GetHashCode();
      if (hasHelpUrl) hash ^= helpUrl_.GetHashCode();
      if (hasStackTraceString) hash ^= stackTraceString_.GetHashCode();
      if (hasRemoteStackTraceString) hash ^= remoteStackTraceString_.GetHashCode();
      if (hasRemoteStackIndex) hash ^= remoteStackIndex_.GetHashCode();
      if (hasExceptionMethod) hash ^= exceptionMethod_.GetHashCode();
      if (hasHResult) hash ^= hResult_.GetHashCode();
      if (hasSource) hash ^= source_.GetHashCode();
      foreach(global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData i in exceptionData_)
        hash ^= i.GetHashCode();
      hash ^= base.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RpcExceptionInfo other = obj as RpcExceptionInfo;
      if (other == null) return false;
      if (hasAssemblyName != other.hasAssemblyName || (hasAssemblyName && !assemblyName_.Equals(other.assemblyName_))) return false;
      if (hasFullTypeName != other.hasFullTypeName || (hasFullTypeName && !fullTypeName_.Equals(other.fullTypeName_))) return false;
      if (hasHasFullDetails != other.hasHasFullDetails || (hasHasFullDetails && !hasFullDetails_.Equals(other.hasFullDetails_))) return false;
      if (hasClassName != other.hasClassName || (hasClassName && !className_.Equals(other.className_))) return false;
      if (hasMessage != other.hasMessage || (hasMessage && !message_.Equals(other.message_))) return false;
      if (hasInnerException != other.hasInnerException || (hasInnerException && !innerException_.Equals(other.innerException_))) return false;
      if (hasHelpUrl != other.hasHelpUrl || (hasHelpUrl && !helpUrl_.Equals(other.helpUrl_))) return false;
      if (hasStackTraceString != other.hasStackTraceString || (hasStackTraceString && !stackTraceString_.Equals(other.stackTraceString_))) return false;
      if (hasRemoteStackTraceString != other.hasRemoteStackTraceString || (hasRemoteStackTraceString && !remoteStackTraceString_.Equals(other.remoteStackTraceString_))) return false;
      if (hasRemoteStackIndex != other.hasRemoteStackIndex || (hasRemoteStackIndex && !remoteStackIndex_.Equals(other.remoteStackIndex_))) return false;
      if (hasExceptionMethod != other.hasExceptionMethod || (hasExceptionMethod && !exceptionMethod_.Equals(other.exceptionMethod_))) return false;
      if (hasHResult != other.hasHResult || (hasHResult && !hResult_.Equals(other.hResult_))) return false;
      if (hasSource != other.hasSource || (hasSource && !source_.Equals(other.source_))) return false;
      if(exceptionData_.Count != other.exceptionData_.Count) return false;
      for(int ix=0; ix < exceptionData_.Count; ix++)
        if(!exceptionData_[ix].Equals(other.exceptionData_[ix])) return false;
      if (!base.Equals(other)) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("assembly_name", hasAssemblyName, assemblyName_, writer);
      PrintField("full_type_name", hasFullTypeName, fullTypeName_, writer);
      PrintField("has_full_details", hasHasFullDetails, hasFullDetails_, writer);
      PrintField("class_name", hasClassName, className_, writer);
      PrintField("message", hasMessage, message_, writer);
      PrintField("inner_exception", hasInnerException, innerException_, writer);
      PrintField("help_url", hasHelpUrl, helpUrl_, writer);
      PrintField("stack_trace_string", hasStackTraceString, stackTraceString_, writer);
      PrintField("remote_stack_trace_string", hasRemoteStackTraceString, remoteStackTraceString_, writer);
      PrintField("remote_stack_index", hasRemoteStackIndex, remoteStackIndex_, writer);
      PrintField("exception_method", hasExceptionMethod, exceptionMethod_, writer);
      PrintField("h_result", hasHResult, hResult_, writer);
      PrintField("source", hasSource, source_, writer);
      PrintField("exception_data", exceptionData_, writer);
      base.PrintTo(writer);
    }
    #endregion
    
    public static RpcExceptionInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcExceptionInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcExceptionInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcExceptionInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcExceptionInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcExceptionInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcExceptionInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcExceptionInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcExceptionInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcExceptionInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcExceptionInfo MakeReadOnly() {
      exceptionData_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcExceptionInfo prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::ExtendableBuilderLite<RpcExceptionInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcExceptionInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcExceptionInfo result;
      
      private RpcExceptionInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcExceptionInfo original = result;
          result = new RpcExceptionInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcExceptionInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RpcExceptionInfo DefaultInstanceForType {
        get { return global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.DefaultInstance; }
      }
      
      public override RpcExceptionInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RpcExceptionInfo) {
          return MergeFrom((RpcExceptionInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcExceptionInfo other) {
        if (other == global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAssemblyName) {
          AssemblyName = other.AssemblyName;
        }
        if (other.HasFullTypeName) {
          FullTypeName = other.FullTypeName;
        }
        if (other.HasHasFullDetails) {
          HasFullDetails = other.HasFullDetails;
        }
        if (other.HasClassName) {
          ClassName = other.ClassName;
        }
        if (other.HasMessage) {
          Message = other.Message;
        }
        if (other.HasInnerException) {
          MergeInnerException(other.InnerException);
        }
        if (other.HasHelpUrl) {
          HelpUrl = other.HelpUrl;
        }
        if (other.HasStackTraceString) {
          StackTraceString = other.StackTraceString;
        }
        if (other.HasRemoteStackTraceString) {
          RemoteStackTraceString = other.RemoteStackTraceString;
        }
        if (other.HasRemoteStackIndex) {
          RemoteStackIndex = other.RemoteStackIndex;
        }
        if (other.HasExceptionMethod) {
          ExceptionMethod = other.ExceptionMethod;
        }
        if (other.HasHResult) {
          HResult = other.HResult;
        }
        if (other.HasSource) {
          Source = other.Source;
        }
        if (other.exceptionData_.Count != 0) {
          result.exceptionData_.Add(other.exceptionData_);
        }
          this.MergeExtensionFields(other);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcExceptionInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcExceptionInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAssemblyName = input.ReadString(ref result.assemblyName_);
              break;
            }
            case 18: {
              result.hasFullTypeName = input.ReadString(ref result.fullTypeName_);
              break;
            }
            case 24: {
              result.hasHasFullDetails = input.ReadBool(ref result.hasFullDetails_);
              break;
            }
            case 34: {
              result.hasClassName = input.ReadString(ref result.className_);
              break;
            }
            case 42: {
              result.hasMessage = input.ReadString(ref result.message_);
              break;
            }
            case 50: {
              global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Builder subBuilder = global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.CreateBuilder();
              if (result.hasInnerException) {
                subBuilder.MergeFrom(InnerException);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              InnerException = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              result.hasHelpUrl = input.ReadString(ref result.helpUrl_);
              break;
            }
            case 66: {
              result.hasStackTraceString = input.ReadString(ref result.stackTraceString_);
              break;
            }
            case 74: {
              result.hasRemoteStackTraceString = input.ReadString(ref result.remoteStackTraceString_);
              break;
            }
            case 80: {
              result.hasRemoteStackIndex = input.ReadInt32(ref result.remoteStackIndex_);
              break;
            }
            case 90: {
              result.hasExceptionMethod = input.ReadString(ref result.exceptionMethod_);
              break;
            }
            case 96: {
              result.hasHResult = input.ReadInt32(ref result.hResult_);
              break;
            }
            case 106: {
              result.hasSource = input.ReadString(ref result.source_);
              break;
            }
            case 114: {
              input.ReadMessageArray(tag, field_name, result.exceptionData_, global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasAssemblyName {
        get { return result.hasAssemblyName; }
      }
      public string AssemblyName {
        get { return result.AssemblyName; }
        set { SetAssemblyName(value); }
      }
      public Builder SetAssemblyName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAssemblyName = true;
        result.assemblyName_ = value;
        return this;
      }
      public Builder ClearAssemblyName() {
        PrepareBuilder();
        result.hasAssemblyName = false;
        result.assemblyName_ = "mscorlib";
        return this;
      }
      
      public bool HasFullTypeName {
        get { return result.hasFullTypeName; }
      }
      public string FullTypeName {
        get { return result.FullTypeName; }
        set { SetFullTypeName(value); }
      }
      public Builder SetFullTypeName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFullTypeName = true;
        result.fullTypeName_ = value;
        return this;
      }
      public Builder ClearFullTypeName() {
        PrepareBuilder();
        result.hasFullTypeName = false;
        result.fullTypeName_ = "System.ApplicationException";
        return this;
      }
      
      public bool HasHasFullDetails {
        get { return result.hasHasFullDetails; }
      }
      public bool HasFullDetails {
        get { return result.HasFullDetails; }
        set { SetHasFullDetails(value); }
      }
      public Builder SetHasFullDetails(bool value) {
        PrepareBuilder();
        result.hasHasFullDetails = true;
        result.hasFullDetails_ = value;
        return this;
      }
      public Builder ClearHasFullDetails() {
        PrepareBuilder();
        result.hasHasFullDetails = false;
        result.hasFullDetails_ = false;
        return this;
      }
      
      public bool HasClassName {
        get { return result.hasClassName; }
      }
      public string ClassName {
        get { return result.ClassName; }
        set { SetClassName(value); }
      }
      public Builder SetClassName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClassName = true;
        result.className_ = value;
        return this;
      }
      public Builder ClearClassName() {
        PrepareBuilder();
        result.hasClassName = false;
        result.className_ = "";
        return this;
      }
      
      public bool HasMessage {
        get { return result.hasMessage; }
      }
      public string Message {
        get { return result.Message; }
        set { SetMessage(value); }
      }
      public Builder SetMessage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMessage = true;
        result.message_ = value;
        return this;
      }
      public Builder ClearMessage() {
        PrepareBuilder();
        result.hasMessage = false;
        result.message_ = "";
        return this;
      }
      
      public bool HasInnerException {
       get { return result.hasInnerException; }
      }
      public global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo InnerException {
        get { return result.InnerException; }
        set { SetInnerException(value); }
      }
      public Builder SetInnerException(global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInnerException = true;
        result.innerException_ = value;
        return this;
      }
      public Builder SetInnerException(global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInnerException = true;
        result.innerException_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInnerException(global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInnerException &&
            result.innerException_ != global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.DefaultInstance) {
            result.innerException_ = global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.CreateBuilder(result.innerException_).MergeFrom(value).BuildPartial();
        } else {
          result.innerException_ = value;
        }
        result.hasInnerException = true;
        return this;
      }
      public Builder ClearInnerException() {
        PrepareBuilder();
        result.hasInnerException = false;
        result.innerException_ = null;
        return this;
      }
      
      public bool HasHelpUrl {
        get { return result.hasHelpUrl; }
      }
      public string HelpUrl {
        get { return result.HelpUrl; }
        set { SetHelpUrl(value); }
      }
      public Builder SetHelpUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHelpUrl = true;
        result.helpUrl_ = value;
        return this;
      }
      public Builder ClearHelpUrl() {
        PrepareBuilder();
        result.hasHelpUrl = false;
        result.helpUrl_ = "";
        return this;
      }
      
      public bool HasStackTraceString {
        get { return result.hasStackTraceString; }
      }
      public string StackTraceString {
        get { return result.StackTraceString; }
        set { SetStackTraceString(value); }
      }
      public Builder SetStackTraceString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStackTraceString = true;
        result.stackTraceString_ = value;
        return this;
      }
      public Builder ClearStackTraceString() {
        PrepareBuilder();
        result.hasStackTraceString = false;
        result.stackTraceString_ = "";
        return this;
      }
      
      public bool HasRemoteStackTraceString {
        get { return result.hasRemoteStackTraceString; }
      }
      public string RemoteStackTraceString {
        get { return result.RemoteStackTraceString; }
        set { SetRemoteStackTraceString(value); }
      }
      public Builder SetRemoteStackTraceString(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRemoteStackTraceString = true;
        result.remoteStackTraceString_ = value;
        return this;
      }
      public Builder ClearRemoteStackTraceString() {
        PrepareBuilder();
        result.hasRemoteStackTraceString = false;
        result.remoteStackTraceString_ = "";
        return this;
      }
      
      public bool HasRemoteStackIndex {
        get { return result.hasRemoteStackIndex; }
      }
      public int RemoteStackIndex {
        get { return result.RemoteStackIndex; }
        set { SetRemoteStackIndex(value); }
      }
      public Builder SetRemoteStackIndex(int value) {
        PrepareBuilder();
        result.hasRemoteStackIndex = true;
        result.remoteStackIndex_ = value;
        return this;
      }
      public Builder ClearRemoteStackIndex() {
        PrepareBuilder();
        result.hasRemoteStackIndex = false;
        result.remoteStackIndex_ = 0;
        return this;
      }
      
      public bool HasExceptionMethod {
        get { return result.hasExceptionMethod; }
      }
      public string ExceptionMethod {
        get { return result.ExceptionMethod; }
        set { SetExceptionMethod(value); }
      }
      public Builder SetExceptionMethod(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExceptionMethod = true;
        result.exceptionMethod_ = value;
        return this;
      }
      public Builder ClearExceptionMethod() {
        PrepareBuilder();
        result.hasExceptionMethod = false;
        result.exceptionMethod_ = "";
        return this;
      }
      
      public bool HasHResult {
        get { return result.hasHResult; }
      }
      public int HResult {
        get { return result.HResult; }
        set { SetHResult(value); }
      }
      public Builder SetHResult(int value) {
        PrepareBuilder();
        result.hasHResult = true;
        result.hResult_ = value;
        return this;
      }
      public Builder ClearHResult() {
        PrepareBuilder();
        result.hasHResult = false;
        result.hResult_ = 0;
        return this;
      }
      
      public bool HasSource {
        get { return result.hasSource; }
      }
      public string Source {
        get { return result.Source; }
        set { SetSource(value); }
      }
      public Builder SetSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder ClearSource() {
        PrepareBuilder();
        result.hasSource = false;
        result.source_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData> ExceptionDataList {
        get { return PrepareBuilder().exceptionData_; }
      }
      public int ExceptionDataCount {
        get { return result.ExceptionDataCount; }
      }
      public global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData GetExceptionData(int index) {
        return result.GetExceptionData(index);
      }
      public Builder SetExceptionData(int index, global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exceptionData_[index] = value;
        return this;
      }
      public Builder SetExceptionData(int index, global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.exceptionData_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddExceptionData(global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.exceptionData_.Add(value);
        return this;
      }
      public Builder AddExceptionData(global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.exceptionData_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeExceptionData(scg::IEnumerable<global::Google.ProtocolBuffers.Rpc.Messages.RpcExceptionInfo.Types.RpcExceptionData> values) {
        PrepareBuilder();
        result.exceptionData_.Add(values);
        return this;
      }
      public Builder ClearExceptionData() {
        PrepareBuilder();
        result.exceptionData_.Clear();
        return this;
      }
    }
    static RpcExceptionInfo() {
      object.ReferenceEquals(global::Google.ProtocolBuffers.Rpc.Messages.CSharpRpcMessagesLite.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcVoid : pb::GeneratedMessageLite<RpcVoid, RpcVoid.Builder> {
    private RpcVoid() { }
    private static readonly RpcVoid defaultInstance = new RpcVoid().MakeReadOnly();
    private static readonly string[] _rpcVoidFieldNames = new string[] {  };
    private static readonly uint[] _rpcVoidFieldTags = new uint[] {  };
    public static RpcVoid DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcVoid DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcVoid ThisMessage {
      get { return this; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rpcVoidFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RpcVoid other = obj as RpcVoid;
      if (other == null) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
    }
    #endregion
    
    public static RpcVoid ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcVoid ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcVoid ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcVoid ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcVoid ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcVoid ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcVoid ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcVoid ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcVoid ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcVoid ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcVoid MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcVoid prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<RpcVoid, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcVoid cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcVoid result;
      
      private RpcVoid PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcVoid original = result;
          result = new RpcVoid();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcVoid MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RpcVoid DefaultInstanceForType {
        get { return global::Google.ProtocolBuffers.Rpc.Messages.RpcVoid.DefaultInstance; }
      }
      
      public override RpcVoid BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RpcVoid) {
          return MergeFrom((RpcVoid) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcVoid other) {
        if (other == global::Google.ProtocolBuffers.Rpc.Messages.RpcVoid.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcVoidFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcVoidFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static RpcVoid() {
      object.ReferenceEquals(global::Google.ProtocolBuffers.Rpc.Messages.CSharpRpcMessagesLite.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcPingRequest : pb::ExtendableMessageLite<RpcPingRequest, RpcPingRequest.Builder> {
    private RpcPingRequest() { }
    private static readonly RpcPingRequest defaultInstance = new RpcPingRequest().MakeReadOnly();
    private static readonly string[] _rpcPingRequestFieldNames = new string[] {  };
    private static readonly uint[] _rpcPingRequestFieldTags = new uint[] {  };
    public static RpcPingRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcPingRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcPingRequest ThisMessage {
      get { return this; }
    }
    
    public override bool IsInitialized {
      get {
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rpcPingRequestFieldNames;
      pb::ExtendableMessageLite<RpcPingRequest, RpcPingRequest.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      extensionWriter.WriteUntil(536870912, output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += ExtensionsSerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      hash ^= base.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RpcPingRequest other = obj as RpcPingRequest;
      if (other == null) return false;
      if (!base.Equals(other)) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      base.PrintTo(writer);
    }
    #endregion
    
    public static RpcPingRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcPingRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcPingRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcPingRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcPingRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcPingRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcPingRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcPingRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcPingRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcPingRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcPingRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcPingRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::ExtendableBuilderLite<RpcPingRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcPingRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcPingRequest result;
      
      private RpcPingRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcPingRequest original = result;
          result = new RpcPingRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcPingRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RpcPingRequest DefaultInstanceForType {
        get { return global::Google.ProtocolBuffers.Rpc.Messages.RpcPingRequest.DefaultInstance; }
      }
      
      public override RpcPingRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RpcPingRequest) {
          return MergeFrom((RpcPingRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcPingRequest other) {
        if (other == global::Google.ProtocolBuffers.Rpc.Messages.RpcPingRequest.DefaultInstance) return this;
        PrepareBuilder();
          this.MergeExtensionFields(other);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcPingRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcPingRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static RpcPingRequest() {
      object.ReferenceEquals(global::Google.ProtocolBuffers.Rpc.Messages.CSharpRpcMessagesLite.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcPingResponse : pb::ExtendableMessageLite<RpcPingResponse, RpcPingResponse.Builder> {
    private RpcPingResponse() { }
    private static readonly RpcPingResponse defaultInstance = new RpcPingResponse().MakeReadOnly();
    private static readonly string[] _rpcPingResponseFieldNames = new string[] {  };
    private static readonly uint[] _rpcPingResponseFieldTags = new uint[] {  };
    public static RpcPingResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcPingResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcPingResponse ThisMessage {
      get { return this; }
    }
    
    public override bool IsInitialized {
      get {
        if (!ExtensionsAreInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rpcPingResponseFieldNames;
      pb::ExtendableMessageLite<RpcPingResponse, RpcPingResponse.Builder>.ExtensionWriter extensionWriter = CreateExtensionWriter(this);
      extensionWriter.WriteUntil(536870912, output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        size += ExtensionsSerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      hash ^= base.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RpcPingResponse other = obj as RpcPingResponse;
      if (other == null) return false;
      if (!base.Equals(other)) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      base.PrintTo(writer);
    }
    #endregion
    
    public static RpcPingResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcPingResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcPingResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcPingResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcPingResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcPingResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcPingResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcPingResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcPingResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcPingResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcPingResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcPingResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::ExtendableBuilderLite<RpcPingResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcPingResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcPingResponse result;
      
      private RpcPingResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcPingResponse original = result;
          result = new RpcPingResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcPingResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RpcPingResponse DefaultInstanceForType {
        get { return global::Google.ProtocolBuffers.Rpc.Messages.RpcPingResponse.DefaultInstance; }
      }
      
      public override RpcPingResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RpcPingResponse) {
          return MergeFrom((RpcPingResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcPingResponse other) {
        if (other == global::Google.ProtocolBuffers.Rpc.Messages.RpcPingResponse.DefaultInstance) return this;
        PrepareBuilder();
          this.MergeExtensionFields(other);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcPingResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcPingResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static RpcPingResponse() {
      object.ReferenceEquals(global::Google.ProtocolBuffers.Rpc.Messages.CSharpRpcMessagesLite.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcMultiPartRequest : pb::GeneratedMessageLite<RpcMultiPartRequest, RpcMultiPartRequest.Builder> {
    private RpcMultiPartRequest() { }
    private static readonly RpcMultiPartRequest defaultInstance = new RpcMultiPartRequest().MakeReadOnly();
    private static readonly string[] _rpcMultiPartRequestFieldNames = new string[] { "bytes_sent", "current_position", "message_status", "method_name", "payload_bytes", "total_bytes", "transaction_id" };
    private static readonly uint[] _rpcMultiPartRequestFieldTags = new uint[] { 48, 40, 8, 26, 58, 32, 18 };
    public static RpcMultiPartRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcMultiPartRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcMultiPartRequest ThisMessage {
      get { return this; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum RpcMessageStatus {
        CONTINUE = 1,
        CANCEL = 2,
        COMPLETE = 3,
      }
      
    }
    #endregion
    
    public const int MessageStatusFieldNumber = 1;
    private bool hasMessageStatus;
    private global::Google.ProtocolBuffers.Rpc.Messages.RpcMultiPartRequest.Types.RpcMessageStatus messageStatus_ = global::Google.ProtocolBuffers.Rpc.Messages.RpcMultiPartRequest.Types.RpcMessageStatus.CANCEL;
    public bool HasMessageStatus {
      get { return hasMessageStatus; }
    }
    public global::Google.ProtocolBuffers.Rpc.Messages.RpcMultiPartRequest.Types.RpcMessageStatus MessageStatus {
      get { return messageStatus_; }
    }
    
    public const int TransactionIdFieldNumber = 2;
    private bool hasTransactionId;
    private pb::ByteString transactionId_ = pb::ByteString.Empty;
    public bool HasTransactionId {
      get { return hasTransactionId; }
    }
    public pb::ByteString TransactionId {
      get { return transactionId_; }
    }
    
    public const int MethodNameFieldNumber = 3;
    private bool hasMethodName;
    private string methodName_ = "";
    public bool HasMethodName {
      get { return hasMethodName; }
    }
    public string MethodName {
      get { return methodName_; }
    }
    
    public const int TotalBytesFieldNumber = 4;
    private bool hasTotalBytes;
    private int totalBytes_;
    public bool HasTotalBytes {
      get { return hasTotalBytes; }
    }
    public int TotalBytes {
      get { return totalBytes_; }
    }
    
    public const int CurrentPositionFieldNumber = 5;
    private bool hasCurrentPosition;
    private int currentPosition_;
    public bool HasCurrentPosition {
      get { return hasCurrentPosition; }
    }
    public int CurrentPosition {
      get { return currentPosition_; }
    }
    
    public const int BytesSentFieldNumber = 6;
    private bool hasBytesSent;
    private int bytesSent_;
    public bool HasBytesSent {
      get { return hasBytesSent; }
    }
    public int BytesSent {
      get { return bytesSent_; }
    }
    
    public const int PayloadBytesFieldNumber = 7;
    private bool hasPayloadBytes;
    private pb::ByteString payloadBytes_ = pb::ByteString.Empty;
    public bool HasPayloadBytes {
      get { return hasPayloadBytes; }
    }
    public pb::ByteString PayloadBytes {
      get { return payloadBytes_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rpcMultiPartRequestFieldNames;
      if (hasMessageStatus) {
        output.WriteEnum(1, field_names[2], (int) MessageStatus, MessageStatus);
      }
      if (hasTransactionId) {
        output.WriteBytes(2, field_names[6], TransactionId);
      }
      if (hasMethodName) {
        output.WriteString(3, field_names[3], MethodName);
      }
      if (hasTotalBytes) {
        output.WriteInt32(4, field_names[5], TotalBytes);
      }
      if (hasCurrentPosition) {
        output.WriteInt32(5, field_names[1], CurrentPosition);
      }
      if (hasBytesSent) {
        output.WriteInt32(6, field_names[0], BytesSent);
      }
      if (hasPayloadBytes) {
        output.WriteBytes(7, field_names[4], PayloadBytes);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMessageStatus) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) MessageStatus);
        }
        if (hasTransactionId) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, TransactionId);
        }
        if (hasMethodName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, MethodName);
        }
        if (hasTotalBytes) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, TotalBytes);
        }
        if (hasCurrentPosition) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, CurrentPosition);
        }
        if (hasBytesSent) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, BytesSent);
        }
        if (hasPayloadBytes) {
          size += pb::CodedOutputStream.ComputeBytesSize(7, PayloadBytes);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasMessageStatus) hash ^= messageStatus_.GetHashCode();
      if (hasTransactionId) hash ^= transactionId_.GetHashCode();
      if (hasMethodName) hash ^= methodName_.GetHashCode();
      if (hasTotalBytes) hash ^= totalBytes_.GetHashCode();
      if (hasCurrentPosition) hash ^= currentPosition_.GetHashCode();
      if (hasBytesSent) hash ^= bytesSent_.GetHashCode();
      if (hasPayloadBytes) hash ^= payloadBytes_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RpcMultiPartRequest other = obj as RpcMultiPartRequest;
      if (other == null) return false;
      if (hasMessageStatus != other.hasMessageStatus || (hasMessageStatus && !messageStatus_.Equals(other.messageStatus_))) return false;
      if (hasTransactionId != other.hasTransactionId || (hasTransactionId && !transactionId_.Equals(other.transactionId_))) return false;
      if (hasMethodName != other.hasMethodName || (hasMethodName && !methodName_.Equals(other.methodName_))) return false;
      if (hasTotalBytes != other.hasTotalBytes || (hasTotalBytes && !totalBytes_.Equals(other.totalBytes_))) return false;
      if (hasCurrentPosition != other.hasCurrentPosition || (hasCurrentPosition && !currentPosition_.Equals(other.currentPosition_))) return false;
      if (hasBytesSent != other.hasBytesSent || (hasBytesSent && !bytesSent_.Equals(other.bytesSent_))) return false;
      if (hasPayloadBytes != other.hasPayloadBytes || (hasPayloadBytes && !payloadBytes_.Equals(other.payloadBytes_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("message_status", hasMessageStatus, messageStatus_, writer);
      PrintField("transaction_id", hasTransactionId, transactionId_, writer);
      PrintField("method_name", hasMethodName, methodName_, writer);
      PrintField("total_bytes", hasTotalBytes, totalBytes_, writer);
      PrintField("current_position", hasCurrentPosition, currentPosition_, writer);
      PrintField("bytes_sent", hasBytesSent, bytesSent_, writer);
      PrintField("payload_bytes", hasPayloadBytes, payloadBytes_, writer);
    }
    #endregion
    
    public static RpcMultiPartRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcMultiPartRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcMultiPartRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcMultiPartRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcMultiPartRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcMultiPartRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcMultiPartRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcMultiPartRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcMultiPartRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcMultiPartRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcMultiPartRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcMultiPartRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<RpcMultiPartRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcMultiPartRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcMultiPartRequest result;
      
      private RpcMultiPartRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcMultiPartRequest original = result;
          result = new RpcMultiPartRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcMultiPartRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RpcMultiPartRequest DefaultInstanceForType {
        get { return global::Google.ProtocolBuffers.Rpc.Messages.RpcMultiPartRequest.DefaultInstance; }
      }
      
      public override RpcMultiPartRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RpcMultiPartRequest) {
          return MergeFrom((RpcMultiPartRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcMultiPartRequest other) {
        if (other == global::Google.ProtocolBuffers.Rpc.Messages.RpcMultiPartRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMessageStatus) {
          MessageStatus = other.MessageStatus;
        }
        if (other.HasTransactionId) {
          TransactionId = other.TransactionId;
        }
        if (other.HasMethodName) {
          MethodName = other.MethodName;
        }
        if (other.HasTotalBytes) {
          TotalBytes = other.TotalBytes;
        }
        if (other.HasCurrentPosition) {
          CurrentPosition = other.CurrentPosition;
        }
        if (other.HasBytesSent) {
          BytesSent = other.BytesSent;
        }
        if (other.HasPayloadBytes) {
          PayloadBytes = other.PayloadBytes;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcMultiPartRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcMultiPartRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.messageStatus_, out unknown)) {
                result.hasMessageStatus = true;
              } else if(unknown is int) {
              }
              break;
            }
            case 18: {
              result.hasTransactionId = input.ReadBytes(ref result.transactionId_);
              break;
            }
            case 26: {
              result.hasMethodName = input.ReadString(ref result.methodName_);
              break;
            }
            case 32: {
              result.hasTotalBytes = input.ReadInt32(ref result.totalBytes_);
              break;
            }
            case 40: {
              result.hasCurrentPosition = input.ReadInt32(ref result.currentPosition_);
              break;
            }
            case 48: {
              result.hasBytesSent = input.ReadInt32(ref result.bytesSent_);
              break;
            }
            case 58: {
              result.hasPayloadBytes = input.ReadBytes(ref result.payloadBytes_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasMessageStatus {
       get { return result.hasMessageStatus; }
      }
      public global::Google.ProtocolBuffers.Rpc.Messages.RpcMultiPartRequest.Types.RpcMessageStatus MessageStatus {
        get { return result.MessageStatus; }
        set { SetMessageStatus(value); }
      }
      public Builder SetMessageStatus(global::Google.ProtocolBuffers.Rpc.Messages.RpcMultiPartRequest.Types.RpcMessageStatus value) {
        PrepareBuilder();
        result.hasMessageStatus = true;
        result.messageStatus_ = value;
        return this;
      }
      public Builder ClearMessageStatus() {
        PrepareBuilder();
        result.hasMessageStatus = false;
        result.messageStatus_ = global::Google.ProtocolBuffers.Rpc.Messages.RpcMultiPartRequest.Types.RpcMessageStatus.CANCEL;
        return this;
      }
      
      public bool HasTransactionId {
        get { return result.hasTransactionId; }
      }
      public pb::ByteString TransactionId {
        get { return result.TransactionId; }
        set { SetTransactionId(value); }
      }
      public Builder SetTransactionId(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTransactionId = true;
        result.transactionId_ = value;
        return this;
      }
      public Builder ClearTransactionId() {
        PrepareBuilder();
        result.hasTransactionId = false;
        result.transactionId_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasMethodName {
        get { return result.hasMethodName; }
      }
      public string MethodName {
        get { return result.MethodName; }
        set { SetMethodName(value); }
      }
      public Builder SetMethodName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMethodName = true;
        result.methodName_ = value;
        return this;
      }
      public Builder ClearMethodName() {
        PrepareBuilder();
        result.hasMethodName = false;
        result.methodName_ = "";
        return this;
      }
      
      public bool HasTotalBytes {
        get { return result.hasTotalBytes; }
      }
      public int TotalBytes {
        get { return result.TotalBytes; }
        set { SetTotalBytes(value); }
      }
      public Builder SetTotalBytes(int value) {
        PrepareBuilder();
        result.hasTotalBytes = true;
        result.totalBytes_ = value;
        return this;
      }
      public Builder ClearTotalBytes() {
        PrepareBuilder();
        result.hasTotalBytes = false;
        result.totalBytes_ = 0;
        return this;
      }
      
      public bool HasCurrentPosition {
        get { return result.hasCurrentPosition; }
      }
      public int CurrentPosition {
        get { return result.CurrentPosition; }
        set { SetCurrentPosition(value); }
      }
      public Builder SetCurrentPosition(int value) {
        PrepareBuilder();
        result.hasCurrentPosition = true;
        result.currentPosition_ = value;
        return this;
      }
      public Builder ClearCurrentPosition() {
        PrepareBuilder();
        result.hasCurrentPosition = false;
        result.currentPosition_ = 0;
        return this;
      }
      
      public bool HasBytesSent {
        get { return result.hasBytesSent; }
      }
      public int BytesSent {
        get { return result.BytesSent; }
        set { SetBytesSent(value); }
      }
      public Builder SetBytesSent(int value) {
        PrepareBuilder();
        result.hasBytesSent = true;
        result.bytesSent_ = value;
        return this;
      }
      public Builder ClearBytesSent() {
        PrepareBuilder();
        result.hasBytesSent = false;
        result.bytesSent_ = 0;
        return this;
      }
      
      public bool HasPayloadBytes {
        get { return result.hasPayloadBytes; }
      }
      public pb::ByteString PayloadBytes {
        get { return result.PayloadBytes; }
        set { SetPayloadBytes(value); }
      }
      public Builder SetPayloadBytes(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPayloadBytes = true;
        result.payloadBytes_ = value;
        return this;
      }
      public Builder ClearPayloadBytes() {
        PrepareBuilder();
        result.hasPayloadBytes = false;
        result.payloadBytes_ = pb::ByteString.Empty;
        return this;
      }
    }
    static RpcMultiPartRequest() {
      object.ReferenceEquals(global::Google.ProtocolBuffers.Rpc.Messages.CSharpRpcMessagesLite.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RpcMultiPartResponse : pb::GeneratedMessageLite<RpcMultiPartResponse, RpcMultiPartResponse.Builder> {
    private RpcMultiPartResponse() { }
    private static readonly RpcMultiPartResponse defaultInstance = new RpcMultiPartResponse().MakeReadOnly();
    private static readonly string[] _rpcMultiPartResponseFieldNames = new string[] { "continue", "response_bytes" };
    private static readonly uint[] _rpcMultiPartResponseFieldTags = new uint[] { 8, 18 };
    public static RpcMultiPartResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RpcMultiPartResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RpcMultiPartResponse ThisMessage {
      get { return this; }
    }
    
    public const int ContinueFieldNumber = 1;
    private bool hasContinue;
    private bool continue_ = true;
    public bool HasContinue {
      get { return hasContinue; }
    }
    public bool Continue {
      get { return continue_; }
    }
    
    public const int ResponseBytesFieldNumber = 2;
    private bool hasResponseBytes;
    private pb::ByteString responseBytes_ = pb::ByteString.Empty;
    public bool HasResponseBytes {
      get { return hasResponseBytes; }
    }
    public pb::ByteString ResponseBytes {
      get { return responseBytes_; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _rpcMultiPartResponseFieldNames;
      if (hasContinue) {
        output.WriteBool(1, field_names[0], Continue);
      }
      if (hasResponseBytes) {
        output.WriteBytes(2, field_names[1], ResponseBytes);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasContinue) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, Continue);
        }
        if (hasResponseBytes) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, ResponseBytes);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasContinue) hash ^= continue_.GetHashCode();
      if (hasResponseBytes) hash ^= responseBytes_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RpcMultiPartResponse other = obj as RpcMultiPartResponse;
      if (other == null) return false;
      if (hasContinue != other.hasContinue || (hasContinue && !continue_.Equals(other.continue_))) return false;
      if (hasResponseBytes != other.hasResponseBytes || (hasResponseBytes && !responseBytes_.Equals(other.responseBytes_))) return false;
      return true;
    }
    
    public override void PrintTo(global::System.IO.TextWriter writer) {
      PrintField("continue", hasContinue, continue_, writer);
      PrintField("response_bytes", hasResponseBytes, responseBytes_, writer);
    }
    #endregion
    
    public static RpcMultiPartResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcMultiPartResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcMultiPartResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RpcMultiPartResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RpcMultiPartResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcMultiPartResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RpcMultiPartResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RpcMultiPartResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RpcMultiPartResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RpcMultiPartResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RpcMultiPartResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RpcMultiPartResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilderLite<RpcMultiPartResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RpcMultiPartResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RpcMultiPartResponse result;
      
      private RpcMultiPartResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RpcMultiPartResponse original = result;
          result = new RpcMultiPartResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RpcMultiPartResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RpcMultiPartResponse DefaultInstanceForType {
        get { return global::Google.ProtocolBuffers.Rpc.Messages.RpcMultiPartResponse.DefaultInstance; }
      }
      
      public override RpcMultiPartResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RpcMultiPartResponse) {
          return MergeFrom((RpcMultiPartResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RpcMultiPartResponse other) {
        if (other == global::Google.ProtocolBuffers.Rpc.Messages.RpcMultiPartResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasContinue) {
          Continue = other.Continue;
        }
        if (other.HasResponseBytes) {
          ResponseBytes = other.ResponseBytes;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_rpcMultiPartResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _rpcMultiPartResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasContinue = input.ReadBool(ref result.continue_);
              break;
            }
            case 18: {
              result.hasResponseBytes = input.ReadBytes(ref result.responseBytes_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasContinue {
        get { return result.hasContinue; }
      }
      public bool Continue {
        get { return result.Continue; }
        set { SetContinue(value); }
      }
      public Builder SetContinue(bool value) {
        PrepareBuilder();
        result.hasContinue = true;
        result.continue_ = value;
        return this;
      }
      public Builder ClearContinue() {
        PrepareBuilder();
        result.hasContinue = false;
        result.continue_ = true;
        return this;
      }
      
      public bool HasResponseBytes {
        get { return result.hasResponseBytes; }
      }
      public pb::ByteString ResponseBytes {
        get { return result.ResponseBytes; }
        set { SetResponseBytes(value); }
      }
      public Builder SetResponseBytes(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResponseBytes = true;
        result.responseBytes_ = value;
        return this;
      }
      public Builder ClearResponseBytes() {
        PrepareBuilder();
        result.hasResponseBytes = false;
        result.responseBytes_ = pb::ByteString.Empty;
        return this;
      }
    }
    static RpcMultiPartResponse() {
      object.ReferenceEquals(global::Google.ProtocolBuffers.Rpc.Messages.CSharpRpcMessagesLite.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
