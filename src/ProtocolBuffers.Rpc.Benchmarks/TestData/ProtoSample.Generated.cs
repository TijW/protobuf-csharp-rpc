// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace ProtocolBuffers.Rpc.Benchmarks.TestData {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ProtoSample {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleProtoData__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData.Builder> internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleProtoData__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleRequest, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleRequest.Builder> internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleResponse, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleResponse.Builder> internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static ProtoSample() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChFQcm90b1NhbXBsZS5wcm90bxIlZ29vZ2xlLlByb3RvY29sQnVmZmVycy5S" + 
          "cGMuQmVuY2htYXJrcyJbCg9TYW1wbGVQcm90b0RhdGESDQoFYnl0ZXMYASAC" + 
          "KAwSDAoEdGV4dBgCIAIoCRIOCgZudW1iZXIYAyACKAUSDQoFZmxvYXQYBCAC" + 
          "KAESDAoEdGltZRgFIAIoECJVCg1TYW1wbGVSZXF1ZXN0EkQKBGRhdGEYASAD" + 
          "KAsyNi5nb29nbGUuUHJvdG9jb2xCdWZmZXJzLlJwYy5CZW5jaG1hcmtzLlNh" + 
          "bXBsZVByb3RvRGF0YSJWCg5TYW1wbGVSZXNwb25zZRJECgRkYXRhGAEgAygL" + 
          "MjYuZ29vZ2xlLlByb3RvY29sQnVmZmVycy5ScGMuQmVuY2htYXJrcy5TYW1w" + 
          "bGVQcm90b0RhdGEyhAEKDVNhbXBsZVNlcnZpY2UScwoEVGVzdBI0Lmdvb2ds" + 
          "ZS5Qcm90b2NvbEJ1ZmZlcnMuUnBjLkJlbmNobWFya3MuU2FtcGxlUmVxdWVz" + 
          "dBo1Lmdvb2dsZS5Qcm90b2NvbEJ1ZmZlcnMuUnBjLkJlbmNobWFya3MuU2Ft" + 
          "cGxlUmVzcG9uc2U=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleProtoData__Descriptor = Descriptor.MessageTypes[0];
        internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleProtoData__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData.Builder>(internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleProtoData__Descriptor,
                new string[] { "Bytes", "Text", "Number", "Float", "Time", });
        internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleRequest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleRequest, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleRequest.Builder>(internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleRequest__Descriptor,
                new string[] { "Data", });
        internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleResponse__Descriptor = Descriptor.MessageTypes[2];
        internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleResponse, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleResponse.Builder>(internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleResponse__Descriptor,
                new string[] { "Data", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SampleProtoData : pb::GeneratedMessage<SampleProtoData, SampleProtoData.Builder> {
    private SampleProtoData() { }
    private static readonly SampleProtoData defaultInstance = new SampleProtoData().MakeReadOnly();
    private static readonly string[] _sampleProtoDataFieldNames = new string[] { "bytes", "float", "number", "text", "time" };
    private static readonly uint[] _sampleProtoDataFieldTags = new uint[] { 10, 33, 24, 18, 41 };
    public static SampleProtoData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SampleProtoData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SampleProtoData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.ProtoSample.internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleProtoData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SampleProtoData, SampleProtoData.Builder> InternalFieldAccessors {
      get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.ProtoSample.internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleProtoData__FieldAccessorTable; }
    }
    
    public const int BytesFieldNumber = 1;
    private bool hasBytes;
    private pb::ByteString bytes_ = pb::ByteString.Empty;
    public bool HasBytes {
      get { return hasBytes; }
    }
    public pb::ByteString Bytes {
      get { return bytes_; }
    }
    
    public const int TextFieldNumber = 2;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    public const int NumberFieldNumber = 3;
    private bool hasNumber;
    private int number_;
    public bool HasNumber {
      get { return hasNumber; }
    }
    public int Number {
      get { return number_; }
    }
    
    public const int FloatFieldNumber = 4;
    private bool hasFloat;
    private double float_;
    public bool HasFloat {
      get { return hasFloat; }
    }
    public double Float {
      get { return float_; }
    }
    
    public const int TimeFieldNumber = 5;
    private bool hasTime;
    private long time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public long Time {
      get { return time_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBytes) return false;
        if (!hasText) return false;
        if (!hasNumber) return false;
        if (!hasFloat) return false;
        if (!hasTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sampleProtoDataFieldNames;
      if (hasBytes) {
        output.WriteBytes(1, field_names[0], Bytes);
      }
      if (hasText) {
        output.WriteString(2, field_names[3], Text);
      }
      if (hasNumber) {
        output.WriteInt32(3, field_names[2], Number);
      }
      if (hasFloat) {
        output.WriteDouble(4, field_names[1], Float);
      }
      if (hasTime) {
        output.WriteSFixed64(5, field_names[4], Time);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBytes) {
          size += pb::CodedOutputStream.ComputeBytesSize(1, Bytes);
        }
        if (hasText) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Text);
        }
        if (hasNumber) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Number);
        }
        if (hasFloat) {
          size += pb::CodedOutputStream.ComputeDoubleSize(4, Float);
        }
        if (hasTime) {
          size += pb::CodedOutputStream.ComputeSFixed64Size(5, Time);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SampleProtoData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SampleProtoData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SampleProtoData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SampleProtoData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SampleProtoData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SampleProtoData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SampleProtoData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SampleProtoData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SampleProtoData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SampleProtoData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SampleProtoData MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SampleProtoData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SampleProtoData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SampleProtoData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SampleProtoData result;
      
      private SampleProtoData PrepareBuilder() {
        if (resultIsReadOnly) {
          SampleProtoData original = result;
          result = new SampleProtoData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SampleProtoData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData.Descriptor; }
      }
      
      public override SampleProtoData DefaultInstanceForType {
        get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData.DefaultInstance; }
      }
      
      public override SampleProtoData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SampleProtoData) {
          return MergeFrom((SampleProtoData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SampleProtoData other) {
        if (other == global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBytes) {
          Bytes = other.Bytes;
        }
        if (other.HasText) {
          Text = other.Text;
        }
        if (other.HasNumber) {
          Number = other.Number;
        }
        if (other.HasFloat) {
          Float = other.Float;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sampleProtoDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sampleProtoDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasBytes = input.ReadBytes(ref result.bytes_);
              break;
            }
            case 18: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
            case 24: {
              result.hasNumber = input.ReadInt32(ref result.number_);
              break;
            }
            case 33: {
              result.hasFloat = input.ReadDouble(ref result.float_);
              break;
            }
            case 41: {
              result.hasTime = input.ReadSFixed64(ref result.time_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBytes {
        get { return result.hasBytes; }
      }
      public pb::ByteString Bytes {
        get { return result.Bytes; }
        set { SetBytes(value); }
      }
      public Builder SetBytes(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBytes = true;
        result.bytes_ = value;
        return this;
      }
      public Builder ClearBytes() {
        PrepareBuilder();
        result.hasBytes = false;
        result.bytes_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
      
      public bool HasNumber {
        get { return result.hasNumber; }
      }
      public int Number {
        get { return result.Number; }
        set { SetNumber(value); }
      }
      public Builder SetNumber(int value) {
        PrepareBuilder();
        result.hasNumber = true;
        result.number_ = value;
        return this;
      }
      public Builder ClearNumber() {
        PrepareBuilder();
        result.hasNumber = false;
        result.number_ = 0;
        return this;
      }
      
      public bool HasFloat {
        get { return result.hasFloat; }
      }
      public double Float {
        get { return result.Float; }
        set { SetFloat(value); }
      }
      public Builder SetFloat(double value) {
        PrepareBuilder();
        result.hasFloat = true;
        result.float_ = value;
        return this;
      }
      public Builder ClearFloat() {
        PrepareBuilder();
        result.hasFloat = false;
        result.float_ = 0D;
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public long Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(long value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0;
        return this;
      }
    }
    static SampleProtoData() {
      object.ReferenceEquals(global::ProtocolBuffers.Rpc.Benchmarks.TestData.ProtoSample.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SampleRequest : pb::GeneratedMessage<SampleRequest, SampleRequest.Builder> {
    private SampleRequest() { }
    private static readonly SampleRequest defaultInstance = new SampleRequest().MakeReadOnly();
    private static readonly string[] _sampleRequestFieldNames = new string[] { "data" };
    private static readonly uint[] _sampleRequestFieldTags = new uint[] { 10 };
    public static SampleRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SampleRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SampleRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.ProtoSample.internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SampleRequest, SampleRequest.Builder> InternalFieldAccessors {
      get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.ProtoSample.internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleRequest__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private pbc::PopsicleList<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData> data_ = new pbc::PopsicleList<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData>();
    public scg::IList<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData> DataList {
      get { return data_; }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData element in DataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sampleRequestFieldNames;
      if (data_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], data_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData element in DataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SampleRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SampleRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SampleRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SampleRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SampleRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SampleRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SampleRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SampleRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SampleRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SampleRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SampleRequest MakeReadOnly() {
      data_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SampleRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SampleRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SampleRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SampleRequest result;
      
      private SampleRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SampleRequest original = result;
          result = new SampleRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SampleRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleRequest.Descriptor; }
      }
      
      public override SampleRequest DefaultInstanceForType {
        get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleRequest.DefaultInstance; }
      }
      
      public override SampleRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SampleRequest) {
          return MergeFrom((SampleRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SampleRequest other) {
        if (other == global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.data_.Count != 0) {
          result.data_.Add(other.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sampleRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sampleRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.data_, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData> DataList {
        get { return PrepareBuilder().data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_[index] = value;
        return this;
      }
      public Builder SetData(int index, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddData(global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_.Add(value);
        return this;
      }
      public Builder AddData(global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData> values) {
        PrepareBuilder();
        result.data_.Add(values);
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.data_.Clear();
        return this;
      }
    }
    static SampleRequest() {
      object.ReferenceEquals(global::ProtocolBuffers.Rpc.Benchmarks.TestData.ProtoSample.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SampleResponse : pb::GeneratedMessage<SampleResponse, SampleResponse.Builder> {
    private SampleResponse() { }
    private static readonly SampleResponse defaultInstance = new SampleResponse().MakeReadOnly();
    private static readonly string[] _sampleResponseFieldNames = new string[] { "data" };
    private static readonly uint[] _sampleResponseFieldTags = new uint[] { 10 };
    public static SampleResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SampleResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SampleResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.ProtoSample.internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SampleResponse, SampleResponse.Builder> InternalFieldAccessors {
      get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.ProtoSample.internal__static_google_ProtocolBuffers_Rpc_Benchmarks_SampleResponse__FieldAccessorTable; }
    }
    
    public const int DataFieldNumber = 1;
    private pbc::PopsicleList<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData> data_ = new pbc::PopsicleList<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData>();
    public scg::IList<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData> DataList {
      get { return data_; }
    }
    public int DataCount {
      get { return data_.Count; }
    }
    public global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData GetData(int index) {
      return data_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData element in DataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sampleResponseFieldNames;
      if (data_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], data_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData element in DataList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SampleResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SampleResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SampleResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SampleResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SampleResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SampleResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SampleResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SampleResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SampleResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SampleResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SampleResponse MakeReadOnly() {
      data_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SampleResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SampleResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SampleResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SampleResponse result;
      
      private SampleResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          SampleResponse original = result;
          result = new SampleResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SampleResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleResponse.Descriptor; }
      }
      
      public override SampleResponse DefaultInstanceForType {
        get { return global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleResponse.DefaultInstance; }
      }
      
      public override SampleResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SampleResponse) {
          return MergeFrom((SampleResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SampleResponse other) {
        if (other == global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.data_.Count != 0) {
          result.data_.Add(other.data_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sampleResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sampleResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.data_, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData> DataList {
        get { return PrepareBuilder().data_; }
      }
      public int DataCount {
        get { return result.DataCount; }
      }
      public global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData GetData(int index) {
        return result.GetData(index);
      }
      public Builder SetData(int index, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_[index] = value;
        return this;
      }
      public Builder SetData(int index, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddData(global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.data_.Add(value);
        return this;
      }
      public Builder AddData(global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.data_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeData(scg::IEnumerable<global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleProtoData> values) {
        PrepareBuilder();
        result.data_.Add(values);
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.data_.Clear();
        return this;
      }
    }
    static SampleResponse() {
      object.ReferenceEquals(global::ProtocolBuffers.Rpc.Benchmarks.TestData.ProtoSample.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  public partial interface ISampleService {
    global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleResponse Test(global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleRequest sampleRequest);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public partial class SampleService : ISampleService, pb::IRpcDispatch, global::System.IDisposable {
    private readonly bool dispose;
    private readonly pb::IRpcDispatch dispatch;
    public SampleService(pb::IRpcDispatch dispatch) : this(dispatch, true) {
    }
    public SampleService(pb::IRpcDispatch dispatch, bool dispose) {
      pb::ThrowHelper.ThrowIfNull(this.dispatch = dispatch, "dispatch");
      this.dispose = dispose && dispatch is global::System.IDisposable;
    }
    
    public void Dispose() {
      if (dispose) ((global::System.IDisposable)dispatch).Dispose();
    }
    
    TMessage pb::IRpcDispatch.CallMethod<TMessage, TBuilder>(string method, pb::IMessageLite request, pb::IBuilderLite<TMessage, TBuilder> response) {
      return dispatch.CallMethod(method, request, response);
    }
    
    public global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleResponse Test(global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleRequest sampleRequest) {
       return dispatch.CallMethod("Test", sampleRequest, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleResponse.CreateBuilder());
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Dispatch : pb::IRpcDispatch, global::System.IDisposable {
      private readonly bool dispose;
      private readonly ISampleService implementation;
      public Dispatch(ISampleService implementation) : this(implementation, true) {
      }
      public Dispatch(ISampleService implementation, bool dispose) {
        pb::ThrowHelper.ThrowIfNull(this.implementation = implementation, "implementation");
        this.dispose = dispose && implementation is global::System.IDisposable;
      }
      
      public void Dispose() {
        if (dispose) ((global::System.IDisposable)implementation).Dispose();
      }
      
      public TMessage CallMethod<TMessage, TBuilder>(string methodName, pb::IMessageLite request, pb::IBuilderLite<TMessage, TBuilder> response)
        where TMessage : pb::IMessageLite<TMessage, TBuilder>
        where TBuilder : pb::IBuilderLite<TMessage, TBuilder> {
        switch(methodName) {
          case "Test": return response.MergeFrom(implementation.Test((global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleRequest)request)).Build();
          default: throw pb::ThrowHelper.CreateMissingMethod(typeof(ISampleService), methodName);
        }
      }
    }
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class ServerStub : pb::IRpcServerStub, global::System.IDisposable {
      private readonly bool dispose;
      private readonly pb::IRpcDispatch implementation;
      public ServerStub(ISampleService implementation) : this(implementation, true) {
      }
      public ServerStub(ISampleService implementation, bool dispose) : this(new Dispatch(implementation, dispose), dispose) {
      }
      public ServerStub(pb::IRpcDispatch implementation) : this(implementation, true) {
      }
      public ServerStub(pb::IRpcDispatch implementation, bool dispose) {
        pb::ThrowHelper.ThrowIfNull(this.implementation = implementation, "implementation");
        this.dispose = dispose && implementation is global::System.IDisposable;
      }
      
      public void Dispose() {
        if (dispose) ((global::System.IDisposable)implementation).Dispose();
      }
      
      public pb::IMessageLite CallMethod(string methodName, pb::ICodedInputStream input, pb::ExtensionRegistry registry) {
        switch(methodName) {
          case "Test": return implementation.CallMethod(methodName, global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleRequest.ParseFrom(input, registry), global::ProtocolBuffers.Rpc.Benchmarks.TestData.SampleResponse.CreateBuilder());
          default: throw pb::ThrowHelper.CreateMissingMethod(typeof(ISampleService), methodName);
        }
      }
    }
  }
  #endregion
  
}

#endregion Designer generated code
